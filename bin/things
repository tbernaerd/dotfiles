#!/usr/bin/osascript

#
# Copyright 2014 Armin Briegel
# Copied from https://github.com/scriptingosx/ThingsCLITool
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

property newline : "
"

on getlistwithname(listname)
	tell application "Things"
		if (name of every area) contains listname then
			return area listname
		else if (name of every list) contains listname then
			return list listname
		else if (name of every project) contains listname then
			return project listname
		else
			return missing value
		end if
	end tell
end getlistwithname

on formatlist(l)
	return ((class of l) as string) & space & ((name of l) as string)
end formatlist

on formattodo(t)
	tell application "Things"
		if (status of t) is completed then
			set tickmark to "√"
		else if (status of t) is open then
			set tickmark to "-"
		else
			set tickmark to "x️"
		end if

		if my todoisinlist(t, list "Today") then
		    set today to "*"
		else
		    set today to space
	    end

		set output to today & tickmark & space & name of t

		if class of t is project then
			set output to output & space & "(" & (count of to dos of t) & ")"
		end

		return output
	end tell
end formattodo


on todoisinlist(t, l)
    tell app "Things"
        return (id of t) is in (id of every to do of l)
    end
end

on listTodos(listname)
	tell application "Things"
		set target to my getlistwithname(listname)

		if target is missing value then
			return "cannot find list named '" & listname & "'"
		end if

		(*if (name of every area) contains listname then
		    set target to area listname
		    set listtype to "Area"
		else if (name of every list) contains listname then
		    set target to list listname
		    set listtype to "List"
		else if (name of every project) contains listname then
		    set target to project listname
		    set listtype to "Project"
		else
		    return "cannot find list or project '"&listname&"'"
		end*)

		set output to "Things: " & my formatlist(target) & newline

		if count of to dos of target is greater than 0 then
            repeat with x in (every to do of target)
                if not (my todoisinlist(x, list "Trash") or my todoisinlist(x, list "Logbook")) then
                    set output to output & my formattodo(x) & newline
                end
            end repeat
        else
            set output to output & "no items" & newline
        end
	end tell
	return output
end listTodos

on addTodoToList(t, l)
    tell application "Things"
        set target to my getlistwithname(l)
        if target is missing value then
            return "cannot find list or project '"&listname&"'"
        end

        make new to do with properties {name: t} at target

        my listTodos(l)
    end
end

on setTodoStatusOnList(t, s, l)
    tell application "Things"
        set target to my getlistwithname(l)

        if target is missing value then
            return "cannot find list or project '"&listname&"'"
        end

        set the_items to every to do of target whose name starts with t

        if count of the_items is greater than 0 then
            set x to first to do of target whose name starts with t
            if s is "completed" then
                set status of x to completed
            else if s is "canceled" then
                set status of x to canceled
            else if s is "open" then
                set status of x to open
            end
            return my listTodos(l)
        else
            return "cannot find to do starting with '"&t&"' in "& my formatlist(target)
        end
    end
end


on deleteTodoOnList(t, l)
    tell application "Things"
        set target to my getlistwithname(l)

        if target is missing value then
            return "cannot find list or project '"&listname&"'"
        end

        set the_items to every to do of target whose name starts with t

        if count of the_items is greater than 0 then
            delete first to do of target whose name starts with t
            return my listTodos(l)
        else
            return "cannot find to do starting with '"&t&"' in "& my formatlist(target)
        end
    end
end

on moveTo(t, sourcelistname, destlistname)
    tell application "Things"
        set sourcelist to my getlistwithname(sourcelistname)
        if sourcelist is missing value then
            return "cannot find list or project '"&sourcelistname&"'"
        end

        set destlist to my getlistwithname(destlistname)
        if destlist is missing value then
            return "cannot find list or project '"&destlistname&"'"
        end

        set the_items to every to do of sourcelist whose name starts with t

        if count of the_items is greater than 0 then
            move first to do of sourcelist whose name starts with t to destlist
            return my listTodos(sourcelistname)
        else
            return "cannot find to do starting with '"&t&"' in "& my formatlist(sourcelist)
        end
    end

end

on run argv
    set modifyverbs to {"add", "check", "uncheck", "cancel", "delete", "today", "next", "defer"}

	if (count of argv) is 0 then -- no arguments, show Today list
		return my listTodos("Today")
	end if

	copy item 1 of argv to arg1

	if (count of argv) is 1 then

		-- help
		if arg1 is in {"help", "-h", "-help", "--help"} then
			return "things Command Line Tool: an CLI interface to the GTD app Things" & newline & ¬
				"usage: things [list, area or project name] [help|open|show] [add|check|uncheck|cancel|delete|today|next|defer itemname]"
		end if

		-- if that one argument is open, activate the application
		if arg1 is in {"open", "show"} then
			tell application "Things"
				activate
				show list "Today"
			end tell
			return
		end if

		-- add with out other args, open quick entry panel
		if arg1 is in {"add", "new"} then
		    tell app "Things" to show quick entry panel
		    return
		end

		-- interpret argument 1 as list name
		return my listTodos(arg1)
	end if

    copy item 2 of argv to arg2

	if (count of argv) is 2 then -- verb with no list name, assume default targets

	    if arg1 is in modifyverbs then
	        if arg1 is "add" then
	            -- default target for add is "Inbox"
	            return my addTodoToList(arg2, "Inbox")
	        else if arg1 is "check" then
	            -- default target for check is "Today"
	            return my setTodoStatusOnList(arg2, "completed", "Today")
	        else if arg1 is "uncheck" then
	            -- default target for check is "Today"
	            return my setTodoStatusOnList(arg2, "open", "Today")
	        else if arg1 is "cancel" then
	            -- default target for delete is "Today"
	            return my setTodoStatusOnList(arg2, "canceled", "Today")
	        else if arg1 is "delete" then
	            -- default target for check is "Today"
	            return my deleteTodoOnList(arg2, "Today")
	        else if arg1 is "today" then
	            -- default target for today is "Today", so do nothing
	            return my listTodos("Today")
	        else if arg1 is in {"next", "defer"} then
	            -- default target for today is "Today", so do nothing
	            return my moveTo(arg2, "Today", "Next")
	        end
	    end

	    if arg2 is in {"open", "show"} then
            set target to my getlistwithname(arg1)
	        tell application "Things"
	            activate
	            show target
	            return
	        end
	    else
	        return "do not understand '" & arg2 & "'"
	    end
	end


	copy item 3 of argv to arg3

	if count of argv is greater than 3 then
	    -- merge all following arguments
	    repeat with x in items 4 through -1 of argv
	        set arg3 to arg3 & space & x
	    end
	end

	if (count of argv) is greater than 2 then
	    if arg2 is in modifyverbs then
	        if arg2 is "add" then
	            return my addTodoToList(arg3, arg1)
	        else if arg2 is "check" then
	            return my setTodoStatusOnList(arg3, "completed", arg1)
	        else if arg2 is "uncheck" then
	            return my setTodoStatusOnList(arg3, "open", arg1)
	        else if arg2 is "cancel" then
	            return my setTodoStatusOnList(arg3, "canceled", arg1)
	        else if arg2 is "delete" then
	            return my deleteTodoOnList(arg3, arg1)
	        else if arg2 is "today" then
	            return my moveto(arg3, arg1, "Today")
	        else if arg2 is in {"next", "defer"} then
	            return my moveTo(arg3, arg1, "Next")
	        end
	    else
	        return "do not understand '" & arg2 & "'"
	    end


	end
end run
